package internal_test

import (
	"encoding/base64"
	"testing"
	"time"

	"github.com/peculiarventures/x509-linter/cmd/internal"
	"github.com/zmap/zcrypto/x509"
)

func TestParseCertificates(t *testing.T) {
	certDer, _ := base64.StdEncoding.DecodeString("MIID+DCCAuCgAwIBAgIUbz8Od22dmDT4D98MU+Cx8rIqJggwDQYJKoZIhvcNAQELBQAwfjEpMCcGA1UEAwwgTmV1c3RhciBDZXJ0aWZpZWQgQ2FsbGVyIElEIENBLTExGTAXBgNVBAsMEHd3dy5jY2lkLm5ldXN0YXIxKTAnBgNVBAoMIE5ldXN0YXIgSW5mb3JtYXRpb24gU2VydmljZXMgSW5jMQswCQYDVQQGEwJVUzAeFw0yMDA3MTUwNDEzNDVaFw0yMzA3MTYwNDEzNDVaMG0xDzANBgNVBAMMBlNIQUtFTjENMAsGA1UECwwEUHJvZDEfMB0GA1UECgwWQmFuZHdpZHRoLmNvbSBDTEVDIExMQzEQMA4GA1UEBwwHUmFsZWlnaDELMAkGA1UECAwCTkMxCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAER/1z6/MsEqZLXSOOr8lKFQ4dyueuzbe1/jCqgz3obWnfV0ngLaR0bCec2SwTPEWUz0bL3Snv6JH0c9HxX38vRKOCAUgwggFEMBYGCCsGAQUFBwEaBAowCKAGFgQ5OTdFMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUO7lcyzEXnEjP1Npm6422qNXhCfcwgYEGCCsGAQUFBwEBBHUwczBHBggrBgEFBQcwAoY7aHR0cDovL2NhY2VydHMuY2NpZC5uZXVzdGFyL05ldXN0YXJDZXJ0aWZpZWRDYWxsZXJJZENBMS5jcnQwKAYIKwYBBQUHMAGGHGh0dHA6Ly9vY3NwLWNhMS5jY2lkLm5ldXN0YXIwSAYDVR0fBEEwPzA9oDugOYY3aHR0cDovL2NybC5jY2lkLm5ldXN0YXIvTmV1c3RhckNlcnRpZmllZENhbGxlcklkQ0ExLmNybDAdBgNVHQ4EFgQU2pSEuxc+Rzaou/8c1wqUX5sdeIwwDgYDVR0PAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQCMsqvU8z9WI3RtrYNi9hBSV2wIidxXA7JfaIiTlFHW3JrW+Gecm3L1oi5Vh5hGmVIym9nLGudMsuH9zyJRLDrxOw/54G9IXgtlQV4zQjczEt3TqfQySu+aLU0d/ti9OkNlslusCcLoof9bmIkHVj+58KjdIgNg1nzYnJlCJJcTh5Bi9s01ho+xIPFoKpNevo7L2N/XpqctWOIF/fbju/vnoYQo9UZo+lKghoEtkOUaz0rUPP/T0PBjxffIgZBQKnEvAOJmK74XNVtG+Hycz6NF0aXp0jEo97jCIa4fyC4tpQAZuAc2UlWd9ADdj0bSzOXnbCWA1hjOg+Y+9vzcD2PI")
	type args struct {
		source []byte
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "PEM with 2 certificates",
			want: 2,
			args: args{
				source: []byte(`-----BEGIN CERTIFICATE-----
MIID+DCCAuCgAwIBAgIUbz8Od22dmDT4D98MU+Cx8rIqJggwDQYJKoZIhvcNAQEL
BQAwfjEpMCcGA1UEAwwgTmV1c3RhciBDZXJ0aWZpZWQgQ2FsbGVyIElEIENBLTEx
GTAXBgNVBAsMEHd3dy5jY2lkLm5ldXN0YXIxKTAnBgNVBAoMIE5ldXN0YXIgSW5m
b3JtYXRpb24gU2VydmljZXMgSW5jMQswCQYDVQQGEwJVUzAeFw0yMDA3MTUwNDEz
NDVaFw0yMzA3MTYwNDEzNDVaMG0xDzANBgNVBAMMBlNIQUtFTjENMAsGA1UECwwE
UHJvZDEfMB0GA1UECgwWQmFuZHdpZHRoLmNvbSBDTEVDIExMQzEQMA4GA1UEBwwH
UmFsZWlnaDELMAkGA1UECAwCTkMxCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYI
KoZIzj0DAQcDQgAER/1z6/MsEqZLXSOOr8lKFQ4dyueuzbe1/jCqgz3obWnfV0ng
LaR0bCec2SwTPEWUz0bL3Snv6JH0c9HxX38vRKOCAUgwggFEMBYGCCsGAQUFBwEa
BAowCKAGFgQ5OTdFMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUO7lcyzEXnEjP
1Npm6422qNXhCfcwgYEGCCsGAQUFBwEBBHUwczBHBggrBgEFBQcwAoY7aHR0cDov
L2NhY2VydHMuY2NpZC5uZXVzdGFyL05ldXN0YXJDZXJ0aWZpZWRDYWxsZXJJZENB
MS5jcnQwKAYIKwYBBQUHMAGGHGh0dHA6Ly9vY3NwLWNhMS5jY2lkLm5ldXN0YXIw
SAYDVR0fBEEwPzA9oDugOYY3aHR0cDovL2NybC5jY2lkLm5ldXN0YXIvTmV1c3Rh
ckNlcnRpZmllZENhbGxlcklkQ0ExLmNybDAdBgNVHQ4EFgQU2pSEuxc+Rzaou/8c
1wqUX5sdeIwwDgYDVR0PAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQCMsqvU
8z9WI3RtrYNi9hBSV2wIidxXA7JfaIiTlFHW3JrW+Gecm3L1oi5Vh5hGmVIym9nL
GudMsuH9zyJRLDrxOw/54G9IXgtlQV4zQjczEt3TqfQySu+aLU0d/ti9OkNlslus
CcLoof9bmIkHVj+58KjdIgNg1nzYnJlCJJcTh5Bi9s01ho+xIPFoKpNevo7L2N/X
pqctWOIF/fbju/vnoYQo9UZo+lKghoEtkOUaz0rUPP/T0PBjxffIgZBQKnEvAOJm
K74XNVtG+Hycz6NF0aXp0jEo97jCIa4fyC4tpQAZuAc2UlWd9ADdj0bSzOXnbCWA
1hjOg+Y+9vzcD2PI
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIE2TCCA8GgAwIBAgIUKLgn5Rb7gesY7PEvnRlFb183ZS0wDQYJKoZIhvcNAQEL
BQAwgYExLDAqBgNVBAMMI05ldXN0YXIgQ2VydGlmaWVkIENhbGxlciBJRCBSb290
IENBMRkwFwYDVQQLDBB3d3cuY2NpZC5uZXVzdGFyMSkwJwYDVQQKDCBOZXVzdGFy
IEluZm9ybWF0aW9uIFNlcnZpY2VzIEluYzELMAkGA1UEBhMCVVMwHhcNMTkwOTIz
MTMzMjE1WhcNMjkwOTIzMTMzMjE1WjB+MSkwJwYDVQQDDCBOZXVzdGFyIENlcnRp
ZmllZCBDYWxsZXIgSUQgQ0EtMTEZMBcGA1UECwwQd3d3LmNjaWQubmV1c3RhcjEp
MCcGA1UECgwgTmV1c3RhciBJbmZvcm1hdGlvbiBTZXJ2aWNlcyBJbmMxCzAJBgNV
BAYTAlVTMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuQpLqAhLMASo
JZU7JqpdMyjEGTmOveIeZOV4bdsw84H9TWX4e9yYPMr6bn0PqxybKqlXdL4odx9v
CcRPTK9mVJq+1bX3r9SpuzqdeE1+ivGMPe2gKfsW7vAchUS3VokjoRyzT1gbnm0o
aEKipQSThjM3XVLBw46hXixfQd9UQG1KQu6BDFepxH/DcMYYimh8z39ZFupHPe1m
+ChEWgydBRruH7eIWVXMbUwmfKbXjwyK/HP+UjG3zt5YfDPVbC0+U4mVNdlDrr4/
YdCetHdNu/mUcfTg/HnPohplIorIM0V/R3cMoZ5XcNpAinexgi7E+TiUi3T3k3HR
id1OebvsTQIDAQABo4IBSTCCAUUwEgYDVR0TAQH/BAgwBgEB/wIBADAfBgNVHSME
GDAWgBQDxFFTZk7gLnzaaVrRHhiUhp4JGzCBgAYIKwYBBQUHAQEEdDByMEoGCCsG
AQUFBzAChj5odHRwOi8vY2FjZXJ0cy5jY2lkLm5ldXN0YXIvTmV1c3RhckNlcnRp
ZmllZENhbGxlcklkUm9vdENBLmNydDAkBggrBgEFBQcwAYYYaHR0cDovL29jc3Au
Y2NpZC5uZXVzdGFyMA8GA1UdJQQIMAYGBFUdJQAwSwYDVR0fBEQwQjBAoD6gPIY6
aHR0cDovL2NybC5jY2lkLm5ldXN0YXIvTmV1c3RhckNlcnRpZmllZENhbGxlcklk
Um9vdENBLmNybDAdBgNVHQ4EFgQUO7lcyzEXnEjP1Npm6422qNXhCfcwDgYDVR0P
AQH/BAQDAgGGMA0GCSqGSIb3DQEBCwUAA4IBAQBJroHa0ic/T4YYGEaXM+1cZNbs
mwDSHCa2+3s5R37HLLUnoLVMByt4YbyvEP41Ty3Q5Uu9Ahk+ZxkJGeron9Fxi5xm
rSUePbj/oTs9MuOTiQUhEHDTUWJi8BmAjCWOZqUmIF//qd1pclEG+s5v0VtBO6H5
1eCuE+423OmGdkZ6vrGe2c1U0JemI1w6bnYeBl4AMXhuuS2BMAojgmCtmSQX9Ung
9r4pgilU7yUV0ci0/C3zmGgFxynoMSqsqkQG4VZcs83dpxd2S7eAPKZSBbriDccK
iTwDTlnRT5eGwLaqnLBlAAnzFZMxO0WzCCCQpFXbJ2p/S0J0lj/DNZfwhuAu
-----END CERTIFICATE-----
`),
			},
		},
		{
			name: "PEM with 1 cert",
			want: 1,
			args: args{
				source: []byte(`-----BEGIN CERTIFICATE-----
MIID+DCCAuCgAwIBAgIUbz8Od22dmDT4D98MU+Cx8rIqJggwDQYJKoZIhvcNAQEL
BQAwfjEpMCcGA1UEAwwgTmV1c3RhciBDZXJ0aWZpZWQgQ2FsbGVyIElEIENBLTEx
GTAXBgNVBAsMEHd3dy5jY2lkLm5ldXN0YXIxKTAnBgNVBAoMIE5ldXN0YXIgSW5m
b3JtYXRpb24gU2VydmljZXMgSW5jMQswCQYDVQQGEwJVUzAeFw0yMDA3MTUwNDEz
NDVaFw0yMzA3MTYwNDEzNDVaMG0xDzANBgNVBAMMBlNIQUtFTjENMAsGA1UECwwE
UHJvZDEfMB0GA1UECgwWQmFuZHdpZHRoLmNvbSBDTEVDIExMQzEQMA4GA1UEBwwH
UmFsZWlnaDELMAkGA1UECAwCTkMxCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYI
KoZIzj0DAQcDQgAER/1z6/MsEqZLXSOOr8lKFQ4dyueuzbe1/jCqgz3obWnfV0ng
LaR0bCec2SwTPEWUz0bL3Snv6JH0c9HxX38vRKOCAUgwggFEMBYGCCsGAQUFBwEa
BAowCKAGFgQ5OTdFMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUO7lcyzEXnEjP
1Npm6422qNXhCfcwgYEGCCsGAQUFBwEBBHUwczBHBggrBgEFBQcwAoY7aHR0cDov
L2NhY2VydHMuY2NpZC5uZXVzdGFyL05ldXN0YXJDZXJ0aWZpZWRDYWxsZXJJZENB
MS5jcnQwKAYIKwYBBQUHMAGGHGh0dHA6Ly9vY3NwLWNhMS5jY2lkLm5ldXN0YXIw
SAYDVR0fBEEwPzA9oDugOYY3aHR0cDovL2NybC5jY2lkLm5ldXN0YXIvTmV1c3Rh
ckNlcnRpZmllZENhbGxlcklkQ0ExLmNybDAdBgNVHQ4EFgQU2pSEuxc+Rzaou/8c
1wqUX5sdeIwwDgYDVR0PAQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQCMsqvU
8z9WI3RtrYNi9hBSV2wIidxXA7JfaIiTlFHW3JrW+Gecm3L1oi5Vh5hGmVIym9nL
GudMsuH9zyJRLDrxOw/54G9IXgtlQV4zQjczEt3TqfQySu+aLU0d/ti9OkNlslus
CcLoof9bmIkHVj+58KjdIgNg1nzYnJlCJJcTh5Bi9s01ho+xIPFoKpNevo7L2N/X
pqctWOIF/fbju/vnoYQo9UZo+lKghoEtkOUaz0rUPP/T0PBjxffIgZBQKnEvAOJm
K74XNVtG+Hycz6NF0aXp0jEo97jCIa4fyC4tpQAZuAc2UlWd9ADdj0bSzOXnbCWA
1hjOg+Y+9vzcD2PI
-----END CERTIFICATE-----
`),
			},
		},
		{
			name: "incorrect PEM",
			want: 0,
			args: args{
				source: []byte(`-----BEGIN CERTIFICATE-----
MIID+DCCAuCgAwIBAgIUbz8Od22dmDT4D98MU+Cx8rIqJggwDQYJKoZIhvcNAQEL
1hjOg+Y+9vzcD2PI
-----END CERTIFICATE-----
`),
			},
		},
		{
			name: "DER with 1 cert",
			want: 1,
			args: args{
				source: certDer,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := len(internal.ParseCertificates(tt.args.source)); got != tt.want {
				t.Errorf("ParseCertificates() = %v, want %v", got, tt.want)
			}
		})
	}
}

func parseCertificate(t *testing.T, base64String string) *x509.Certificate {
	raw, err := base64.StdEncoding.DecodeString(base64String)
	if err != nil {
		t.Fatalf("Cannot decode the base64 string of the certificate. Error: %s", err.Error())
	}
	cert, err := x509.ParseCertificate(raw)
	if err != nil {
		t.Fatalf("Cannot parse the certificate. Error: %s", err.Error())
	}

	return cert
}

func TestGetValidityDays(t *testing.T) {
	type args struct {
		c *x509.Certificate
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "3 years (1096 days)",
			args: args{
				c: parseCertificate(t, "MIID+zCCAuOgAwIBAgIUGFko9jLiaggPzUHJ9QICtqumBG8wDQYJKoZIhvcNAQELBQAwfjEpMCcGA1UEAwwgTmV1c3RhciBDZXJ0aWZpZWQgQ2FsbGVyIElEIENBLTExGTAXBgNVBAsMEHd3dy5jY2lkLm5ldXN0YXIxKTAnBgNVBAoMIE5ldXN0YXIgSW5mb3JtYXRpb24gU2VydmljZXMgSW5jMQswCQYDVQQGEwJVUzAeFw0yMDAxMTAyMDA5MDNaFw0yMzAxMTAyMDA5MDNaMHAxGDAWBgNVBAMMD0NlbnR1cnlMaW5rLmNvbTEXMBUGA1UECwwOQ29tbXVuaWNhdGlvbnMxEDAOBgNVBAoMB1N1cHBvcnQxDzANBgNVBAcMBk1vbnJvZTELMAkGA1UECAwCQ0ExCzAJBgNVBAYTAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEEPiNlGRnSNvkauQ6SxPjLUpRMmgRxRtmIHbaBhCVdPXCEsxzeWBpgY7ND+ju4m7YB7PQ+Gb6IOb/Oxs0FUVfSaOCAUgwggFEMAwGA1UdEwEB/wQCMAAwHwYDVR0jBBgwFoAUO7lcyzEXnEjP1Npm6422qNXhCfcwgYEGCCsGAQUFBwEBBHUwczBHBggrBgEFBQcwAoY7aHR0cDovL2NhY2VydHMuY2NpZC5uZXVzdGFyL05ldXN0YXJDZXJ0aWZpZWRDYWxsZXJJZENBMS5jcnQwKAYIKwYBBQUHMAGGHGh0dHA6Ly9vY3NwLWNhMS5jY2lkLm5ldXN0YXIwSAYDVR0fBEEwPzA9oDugOYY3aHR0cDovL2NybC5jY2lkLm5ldXN0YXIvTmV1c3RhckNlcnRpZmllZENhbGxlcklkQ0ExLmNybDAdBgNVHQ4EFgQUAWBuLN/b0nn97j1pD1KRe5Eul+AwDgYDVR0PAQH/BAQDAgeAMBYGCCsGAQUFBwEaBAowCKAGFgQ4ODI2MA0GCSqGSIb3DQEBCwUAA4IBAQAF+LdvjhXSawCgp3Xn82nr+EuOHv/2Qpgr2GjYJZiA83iNkYIZZ6C+EGu/IQvPQoAvXs7pJJzEuSGbniH5jRhgMqPZGz64uguwmH8u8wZjDTnhdW7dnlOrP3EMj9jJoncnyGPQrIRFGbGhDPWxsl8X1U8rvitUd+kOXRgUUdvKq7lEHFLLxoTTixbp/tT9dMLEU0UsjJa5bUeWalqpVR+kvEK1WvyD3AaK456wlMj1nM2XEND2jt24G+nOB9MjhZljQgl1yRTZtKviqUZrwq5hEUdHIYvGWXaiuNK7MZkkmb/7i5hirrFPLFJ5K4NLBnsJsYLvmPlG3CCGoXDYtJXo"),
			},
			want: 1096,
		},
		{
			name: "3 months (90 days)",
			args: args{
				c: parseCertificate(t, "MIIDKjCCAtGgAwIBAgIUHANi+8RbpIVe38s/fJkNV/r2hakwCgYIKoZIzj0EAwIwcTELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAldBMRAwDgYDVQQHEwdTZWF0dGxlMR4wHAYDVQQKExVNYXJ0aW5pIFNlY3VyaXR5LCBMTEMxIzAhBgNVBAMTGk1hcnRpbmkgU2VjdXJpdHkgU0hBS0VOIEcxMB4XDTIyMDkyODE3NTQyNVoXDTIyMTIyNzA2MDAwMFowdzEUMBIGA1UEAxMLU0hBS0VOIDcwOUoxKTAnBgNVBAUTIDQ1NUE4MTY0RkEyNkVGMUZCM0ExNEM0MzE4ODM0MzhEMQswCQYDVQQGEwJVUzEnMCUGA1UEChMeTE9XIExBVEVOQ1kgQ09NTVVOSUNBVElPTlMgTExDMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEspSxrqIB0kl4lLRyHx4sliqf58RNDQJlqz/xhS/lnlJsQTS3qVs6gqeAfe6rHejfGVosbM8H2Vx775E46ClfYqOCAT8wggE7MA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBRIGyEaQDL4bz7/pdCXgEmoFb/EbTAfBgNVHSMEGDAWgBQt1ctQCVNMkSR/I7Gp5SWHOJZJgjAWBggrBgEFBQcBGgQKMAigBhYENzA5SjCBpgYDVR0fBIGeMIGbMIGYoDqgOIY2aHR0cHM6Ly9hdXRoZW50aWNhdGUtYXBpLmljb25lY3Rpdi5jb20vZG93bmxvYWQvdjEvY3JsolqkWDBWMRQwEgYDVQQHEwtCcmlkZ2V3YXRlcjELMAkGA1UECBMCTkoxEzARBgNVBAMTClNUSS1QQSBDUkwxCzAJBgNVBAYTAlVTMQ8wDQYDVQQKEwZTVEktUEEwGgYDVR0gAQH/BBAwDjAMBgpghkgBhv8JAQEDMAoGCCqGSM49BAMCA0cAMEQCICb75dQUYMstzzmEtSXSS0y2aXX5GhN9uagR1iVaScVMAiBEGBMoMxPZZ0mBEkG+aSB9DujyZy6DLZmrl5NkWhxB3w=="),
			},
			want: 90,
		},
		{
			name: "1 day",
			args: args{
				c: parseCertificate(t, "MIIBDDCBs6ADAgECAgEBMAoGCCqGSM49BAMCMA0xCzAJBgNVBAMTAkNBMB4XDTIyMTAxMDE3MjAyMVoXDTIyMTAxMTE3MjAyMVowDzENMAsGA1UEAxMETGVhZjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGG0PGLskEbiBY0xDuYg8vPMzcTyLvhBPl40uARkuu4uTScK2fQL5VP7d3t3JkPEmstVQS4Cqc/fvVJRQIdKV06jAjAAMAoGCCqGSM49BAMCA0gAMEUCIQCU2PrUfAocvNNzP2du/77S+fBR4wLu7ug3XVwvTISJVwIgEOOFivZJa0MqmWkwqB9iA1KwiyfgW6k2tATHEw7aafo="),
			},
			want: 1,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := internal.GetValidityDays(tt.args.c); got != tt.want {
				t.Errorf("GetValidityDays() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestGetRemainingDays(t *testing.T) {
	type args struct {
		c   *x509.Certificate
		now time.Time
	}
	cert := parseCertificate(t, "MIIBDDCBs6ADAgECAgEBMAoGCCqGSM49BAMCMA0xCzAJBgNVBAMTAkNBMB4XDTIyMTAxMDE3MjAyMVoXDTIyMTAxMTE3MjAyMVowDzENMAsGA1UEAxMETGVhZjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGG0PGLskEbiBY0xDuYg8vPMzcTyLvhBPl40uARkuu4uTScK2fQL5VP7d3t3JkPEmstVQS4Cqc/fvVJRQIdKV06jAjAAMAoGCCqGSM49BAMCA0gAMEUCIQCU2PrUfAocvNNzP2du/77S+fBR4wLu7ug3XVwvTISJVwIgEOOFivZJa0MqmWkwqB9iA1KwiyfgW6k2tATHEw7aafo=")
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "2 days",
			args: args{
				c:   cert,
				now: time.Date(2022, time.October, 11, 0, 0, 0, 0, time.UTC),
			},
			want: 1,
		},
		{
			name: "-1 days",
			args: args{
				c:   cert,
				now: time.Date(2022, time.October, 13, 0, 0, 0, 0, time.UTC),
			},
			want: -1,
		},
		{
			name: "?? days",
			args: args{
				c:   parseCertificate(t, "MIIDKzCCAtGgAwIBAgIUO5Ul22ujxF/mUyCN9trojyl92sswCgYIKoZIzj0EAwIwcTELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAldBMRAwDgYDVQQHEwdTZWF0dGxlMR4wHAYDVQQKExVNYXJ0aW5pIFNlY3VyaXR5LCBMTEMxIzAhBgNVBAMTGk1hcnRpbmkgU2VjdXJpdHkgU0hBS0VOIEcxMB4XDTIyMDkyODIxMzE1NFoXDTIyMTIyNzA2MDAwMFowdzEUMBIGA1UEAxMLU0hBS0VOIDcwOUoxKTAnBgNVBAUTIDA3NjE1QjM5MjYxNzczMDczMjRBNEJBMzBCOTBCODc2MQswCQYDVQQGEwJVUzEnMCUGA1UEChMeTE9XIExBVEVOQ1kgQ09NTVVOSUNBVElPTlMgTExDMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEuo2sdvQME2uhTVVbzq2hAWmbEKwl5QxVi/gEycR0FNt1IqogXwp4DguFJMIQg5Tq2YzfJn5EcYXJl/MbnWkmRqOCAT8wggE7MA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBTVNnrRLzgn/MTquelAIF9vVPWnRjAfBgNVHSMEGDAWgBQt1ctQCVNMkSR/I7Gp5SWHOJZJgjAWBggrBgEFBQcBGgQKMAigBhYENzA5SjCBpgYDVR0fBIGeMIGbMIGYoDqgOIY2aHR0cHM6Ly9hdXRoZW50aWNhdGUtYXBpLmljb25lY3Rpdi5jb20vZG93bmxvYWQvdjEvY3JsolqkWDBWMRQwEgYDVQQHEwtCcmlkZ2V3YXRlcjELMAkGA1UECBMCTkoxEzARBgNVBAMTClNUSS1QQSBDUkwxCzAJBgNVBAYTAlVTMQ8wDQYDVQQKEwZTVEktUEEwGgYDVR0gAQH/BBAwDjAMBgpghkgBhv8JAQEDMAoGCCqGSM49BAMCA0gAMEUCIQD7CNa49VBCKEyD6ECxM8PRF5mO5PLyBly5hfs+yLaMYQIgE2Jc+GGQfF7zjklbX1cG4eRoyFjOjBsuyHNhuxOkOqI="),
				now: time.Date(2022, time.October, 11, 0, 0, 0, 0, time.UTC),
			},
			want: 78,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := internal.GetRemainingDays(tt.args.c, tt.args.now); got != tt.want {
				t.Errorf("GetRemainingDays() = %v, want %v", got, tt.want)
			}
		})
	}
}
